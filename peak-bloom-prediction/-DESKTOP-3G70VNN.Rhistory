geom_line(linewidth = 1) +
geom_ribbon(color = 'black', linetype = '22', linewidth = 0.8, fill = NA) +
geom_point(aes(y = bloom_doy)) +
scale_x_continuous(breaks = c(2015, 2018, 2021, 2024)) +
facet_grid(cols = vars(str_to_title(location))) +
labs(x = "Year", y = "Peak bloom (days since Jan 1st)")
#' Small helper function to convert the day of year to
#' the actual date.
#'
#' @param year year as an integer
#' @param doy day of the year as integer (1 means January 1st)
#' @return date string
doy_to_date <- function (year, doy) {
strptime(paste(year, doy, sep = '-'), '%Y-%j') |> # create date object
strftime('%Y-%m-%d') # translate back to date string in ISO 8601 format
}
predictions |>
filter(year == 2025) |>
mutate(prediction = round(prediction),
lower = floor(lower),
upper = ceiling(upper),
prediction_date = doy_to_date(year, prediction))
#' Small helper function to convert the day of year to
#' the actual date.
#'
#' @param year year as an integer
#' @param doy day of the year as integer (1 means January 1st)
#' @return date string
doy_to_date <- function (year, doy) {
strptime(paste(year, doy, sep = '-'), '%Y-%j') |> # create date object
strftime('%Y-%m-%d') # translate back to date string in ISO 8601 format
}
predictions |>
filter(year == 2025) |>
mutate(prediction = round(prediction),
lower = floor(lower),
upper = ceiling(upper),
prediction_date = doy_to_date(year, prediction))
# Fit simple least-squares lines for all sites.
# We use larger weights for observations from Vancouver than for the other sites
ls_fit_for_van <- lm(bloom_doy ~ year, data = cherry, subset = year >= 1880,
weights = (location == 'vancouver') +
0.2 * (location != 'vancouver'))
vancouver_grid <- tibble(location = 'vancouver', year = 2023:2025)
predictions_vancouver <- vancouver_grid |>
bind_cols(predict(ls_fit_for_van, newdata = vancouver_grid,
interval = 'prediction', level = 0.9)) |>
rename(prediction = fit, lower = lwr, upper = upr)
```{r}
predictions_vancouver
#| fig-width: 8
#| fig-height: 3
#| out-width: 100%
#| fig-cap: |
#|   Predictions and 90% prediction intervals from a simple linear regression model for
#|   Vancouver using data from all four sites.
# Plot the predictions alongside the actual observations for 2015 up to 2023.
cherry |>
right_join(predictions_vancouver, by = c('year', 'location')) |>
ggplot(aes(x = year, y = prediction, ymin = lower, ymax = upper)) +
geom_line(linewidth = 1) +
geom_ribbon(color = 'black', linetype = '22', linewidth = 0.8, fill = NA) +
geom_point(aes(y = bloom_doy)) +
scale_x_continuous(breaks = 2022:2024) +
facet_grid(cols = vars(str_to_title(location))) +
labs(x = "Year", y = "Peak bloom (days since Jan 1st)")
predictions <- predictions |>
filter(location != 'vancouver') |>
bind_rows(predictions_vancouver)
#| label: load-historical-data-nyc
nyc_data_npn <- read_csv("data/USA-NPN_status_intensity_observations_data.csv") |>
filter(Site_ID == 32789,
Species_ID == 228) |>
mutate(Observation_Date = as_date(Observation_Date, format = '%m/%d/%y'))
#| warning: true
nyc_data <- nyc_data_npn |>
arrange(Observation_Date) |>
mutate(year = year(Observation_Date)) |>
group_by(year) |>
summarize(first_flower_index = min(which(Phenophase_Status == 1)),
bloom_date = strftime(Observation_Date[first_flower_index], format = '%Y-%m-%d'),
bloom_doy = Day_of_Year[first_flower_index],
.groups = 'drop') |>
filter(!is.na(bloom_doy)) |>
select(-first_flower_index) |>
mutate(location = 'newyorkcity')
cherry_with_nyc <- cherry |>
bind_rows(nyc_data)
# Fit simple least-squares lines for all sites.
# We use larger weights for observations from NYC than for the other sites
ls_fit_for_nyc <- lm(bloom_doy ~ year, data = cherry_with_nyc, subset = year >= 1880,
weights = (location == 'newyorkcity') +
0.2 * (location != 'newyorkcity'))
nyc_grid <- tibble(location = 'newyorkcity', year = 2022:2025)
predictions_nyc <- nyc_grid |>
bind_cols(predict(ls_fit_for_nyc, newdata = nyc_grid,
interval = 'prediction', level = 0.9)) |>
rename(prediction = fit, lower = lwr, upper = upr)
predictions_nyc
#| fig-width: 8
#| fig-height: 3
#| out-width: 100%
#| fig-cap: |
#|   Predictions and 90% prediction intervals from a simple linear regression model for
#|   Washington Square Park in NYC using data from all five sites.
# Plot the predictions alongside the actual observations for 2015 up to 2023.
cherry_with_nyc |>
right_join(predictions_nyc, by = c('year', 'location')) |>
ggplot(aes(x = year, y = prediction, ymin = lower, ymax = upper)) +
geom_line(linewidth = 1) +
geom_ribbon(color = 'black', linetype = '22', linewidth = 0.8, fill = NA) +
geom_point(aes(y = bloom_doy)) +
scale_x_continuous(breaks = 2022:2025) +
facet_grid(cols = vars(str_to_title(location))) +
labs(x = "Year", y = "Peak bloom (days since Jan 1st)")
predictions <- predictions |>
filter(location != 'newyorkcity') |>
bind_rows(predictions_nyc)
predictions |>
filter(year == 2025) |>
mutate(predicted_date = strptime(paste(year, prediction), "%Y %j") |>
as_date())
#| eval: false
NOAA_WEB_API_TOKEN <- 'JXxEXAfAIpieitwOnVrAYhrBSuHkKrmQ'
# or
NOAA_WEB_API_TOKEN <- Sys.getenv("JXxEXAfAIpieitwOnVrAYhrBSuHkKrmQ")
library(httr2)
library(jsonlite)
NOAA_API_BASE_URL <- "https://www.ncei.noaa.gov/cdo-web/api/v2/data"
# Define the station IDs for the specified locations
stations <- c(
"washingtondc" = "GHCND:USW00013743",
"vancouver"    = "GHCND:CA001108395",
"newyorkcity"  = "GHCND:USW00014732",
"liestal"      = "GHCND:SZ000001940",
"kyoto"        = "GHCND:JA000047759")
nested_to_tibble <- function (x) {
# Determine the variable names in the response
variable_names <- map(x, names) |>
unlist(use.names = FALSE) |>
unique()
names(variable_names) <- variable_names
# Reshape the response from a nested list into a table
map(variable_names, \(i) {
map(x, \(y) {
if (is.null(y[[i]])) {
NA_character_
} else {
y[[i]]
}
}) |>
unlist(use.names = FALSE)
}) |>
as_tibble()
}
get_daily_avg_temp <- function(station_id, start_date, end_date,
api_key, base_url, window_size = 300) {
windows <- seq(as_date(start_date),
as_date(end_date) + days(window_size + 1),
by = sprintf("%d days", window_size))
batches <- map2(windows[-length(windows)], windows[-1] - days(1), \(from, to) {
if (from > Sys.Date()) {
return(NULL)
}
response <- tryCatch(
request(base_url) |>
req_headers(token = api_key) |>
req_url_query(
datasetid = "GHCND",
stationid = station_id,
datatypeid = "TAVG,TMAX",
startdate = from,
enddate = min(as_date(to), Sys.Date()),
units = "metric",
limit = 1000
) |>
req_retry(max_tries = 10) |>
req_perform() |>
resp_body_json(),
httr2_http = \(cnd) {
rlang::warn(sprintf("Failed to retrieve data for station %s in time window %s--%s",
station_id, from, to),
parent = cnd)
NULL
})
})
map(batches, \(x) nested_to_tibble(x$results)) |>
list_rbind() |>
mutate(date = as_date(date))
}
#| cache: true
historic_temperatures <- cherry |>
group_by(location) |>
summarize(start_date = sprintf('%d-01-01', pmax(1970, min(year)) - 1)) |>
left_join(tibble(location = names(stations),
station_id = stations),
by = 'location') |>
group_by(location) |>
group_modify(\(x, gr) {
get_daily_avg_temp(station_id = x$station_id,
start_date = x$start_date,
end_date = Sys.Date(),
api_key = NOAA_WEB_API_TOKEN,
base_url = NOAA_API_BASE_URL)
})
NOAA_API_BASE_URL <- "https://www.ncei.noaa.gov/cdo-web/api/v2/data"
# Define the station IDs for the specified locations
stations <- c(
"washingtondc" = "GHCND:USW00013743",
"vancouver"    = "GHCND:CA001108395",
"newyorkcity"  = "GHCND:USW00014732",
"liestal"      = "GHCND:SZ000001940",
"kyoto"        = "GHCND:JA000047759")
#| eval: false
NOAA_WEB_API_TOKEN <- 'JXxEXAfAIpieitwOnVrAYhrBSuHkKrmQ'
nested_to_tibble <- function (x) {
# Determine the variable names in the response
variable_names <- map(x, names) |>
unlist(use.names = FALSE) |>
unique()
names(variable_names) <- variable_names
# Reshape the response from a nested list into a table
map(variable_names, \(i) {
map(x, \(y) {
if (is.null(y[[i]])) {
NA_character_
} else {
y[[i]]
}
}) |>
unlist(use.names = FALSE)
}) |>
as_tibble()
}
get_daily_avg_temp <- function(station_id, start_date, end_date,
api_key, base_url, window_size = 300) {
windows <- seq(as_date(start_date),
as_date(end_date) + days(window_size + 1),
by = sprintf("%d days", window_size))
batches <- map2(windows[-length(windows)], windows[-1] - days(1), \(from, to) {
if (from > Sys.Date()) {
return(NULL)
}
response <- tryCatch(
request(base_url) |>
req_headers(token = api_key) |>
req_url_query(
datasetid = "GHCND",
stationid = station_id,
datatypeid = "TAVG,TMAX",
startdate = from,
enddate = min(as_date(to), Sys.Date()),
units = "metric",
limit = 1000
) |>
req_retry(max_tries = 10) |>
req_perform() |>
resp_body_json(),
httr2_http = \(cnd) {
rlang::warn(sprintf("Failed to retrieve data for station %s in time window %s--%s",
station_id, from, to),
parent = cnd)
NULL
})
})
map(batches, \(x) nested_to_tibble(x$results)) |>
list_rbind() |>
mutate(date = as_date(date))
}
#| cache: true
historic_temperatures <- cherry |>
group_by(location) |>
summarize(start_date = sprintf('%d-01-01', pmax(1970, min(year)) - 1)) |>
left_join(tibble(location = names(stations),
station_id = stations),
by = 'location') |>
group_by(location) |>
group_modify(\(x, gr) {
get_daily_avg_temp(station_id = x$station_id,
start_date = x$start_date,
end_date = Sys.Date(),
api_key = NOAA_WEB_API_TOKEN,
base_url = NOAA_API_BASE_URL)
})
#| cache: true
historic_temperatures <- cherry |>
group_by(location) |>
summarize(start_date = sprintf('%d-01-01', pmax(1970, min(year)) - 1)) |>
left_join(tibble(location = names(stations),
station_id = stations),
by = 'location') |>
group_by(location) |>
group_modify(\(x, gr) {
get_daily_avg_temp(station_id = x$station_id,
start_date = x$start_date,
end_date = Sys.Date(),
api_key = NOAA_WEB_API_TOKEN,
base_url = NOAA_API_BASE_URL)
})
View(historic_temperatures)
unique(historic_temperatures$attributes)
historic_temperatures |>
filter(datatype == 'TMAX') |>
ggplot(aes(x = date, y = value)) +
geom_line() +
labs(x = "Year", y = "Average maximum temperature (°C)") +
facet_grid(rows = vars(location))
avg_winter_temp <- historic_temperatures |>
filter(datatype == 'TMAX') |>
mutate(year = case_when(
month(date) < 3 ~ year(date),
month(date) == 12 ~ year(date) + 1,
TRUE ~ NA_integer_
)) |>
filter(!is.na(year), year >= 1970) |>
group_by(location, year) |>
summarize(avg_tmax = mean(value),
.groups = 'drop')
avg_winter_temp |>
ggplot(aes(x = year, y = avg_tmax)) +
geom_line() +
labs(x = "Year", y = "Average maximum temperature (°C)") +
facet_grid(rows = vars(location))
predictions_from_temp |>
left_join(cherry,
by = c("location", "year")) |>
ggplot(aes(x = year)) +
geom_point(aes(y = bloom_doy)) +
geom_line(aes(y = pred_bloom)) +
facet_grid(rows = vars(location))
ls_fit_with_temp <- cherry |>
inner_join(avg_winter_temp,
by = c("location", "year")) |>
lm(formula = bloom_doy ~ year * location + avg_tmax)
cherry_grid <- expand_grid(location = unique(cherry$location),
year = 1990:2025) |>
inner_join(avg_winter_temp,
by = c("location", "year"))
predictions_from_temp <- cherry_grid |>
mutate(pred_bloom = predict(ls_fit_with_temp, newdata = cherry_grid))
predictions_from_temp |>
left_join(cherry,
by = c("location", "year")) |>
ggplot(aes(x = year)) +
geom_point(aes(y = bloom_doy)) +
geom_line(aes(y = pred_bloom)) +
facet_grid(rows = vars(location))
predictions_vancouver |>
left_join(predictions_from_temp,
by = c("location", "year")) |>
select(year, pred_temporal = prediction, pred_temp = pred_bloom) |>
pivot_longer(cols = -year) |>
mutate(name = if_else(name == "pred_temporal",
"Method 1: location-based model",
"Method 2: temperature-based model")) |>
ggplot() +
aes(x = year, y = value, linetype = name) +
geom_line() +
scale_x_continuous(breaks = 2022:2024) +
labs(x = "Year", linetype = "",
y = "Predicted peak bloom (days since Jan 1st) for Vancouver") +
theme(legend.position = "bottom")
View(avg_winter_temp)
View(cherry)
View(cherry)
View(cherry_grid)
View(cherry_no_nyc)
View(cherry_no_nyc_grid)
View(cherry_with_nyc)
View(historic_temperatures)
View(avg_winter_temp)
View(historic_temperatures)
View(historic_temperatures)
View(cherry)
rel_cherry_data <- cherry %>%
filter(year >= 1969)
View(rel_cherry_data)
View(ls_fit_with_temp)
cherry |>
inner_join(avg_winter_temp,
by = c("location", "year"))
cherry |>
inner_join(avg_winter_temp,
by = c("location", "year"))
historic_temperatures %>%
mutate(Year = year(date))
Period = ifelse(value <= 7.22, "Freezing Period", "Warming Period")
historic_temperatures
Period = ifelse(value <= 7.22, "Freezing Period", "Warming Period")
historic_temperatures %>%
mutate(Year = year(date),
Period = ifelse(value <= 7.22, "Freezing Period", "Warming Period"))
historic_temperatures %>%
mutate(Year = year(date),
Period = case_when(
value <= 7.22  ~ "Freezing Period",
value <= 15    ~ "Cool Period",
value <= 25    ~ "Mild Period",
TRUE           ~ "Hot Period"))   # Default case
historic_temperatures %>%
mutate(Year = year(date),
Period = case_when(
value <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
temp_with_periods <- historic_temperatures %>%
mutate(Year = year(date),
Period = case_when(
value <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
rel_cherry_data
temp_with_periods
temp_with_periods %>%
filter(datatype == 'TMAX')
temp_with_periods
temp_with_periods %>%
filter(datatype == 'TMAX') |>
mutate(year = case_when(
month(date) < 3 ~ year(date),
month(date) == 12 ~ year(date) + 1,
TRUE ~ NA_integer_
))
temp_with_periods
temp_with_periods %>%
filter(datatype == 'TMAX') |>
mutate(year = case_when(
month(date) < 3 ~ year(date),
month(date) == 12 ~ year(date) + 1,
TRUE ~ NA_integer_
))
temp_with_periods %>%
filter(datatype == 'TMAX') |>
mutate(Month = month(date)) %?%
group_by(location, date, Year, month)
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %?%
group_by(location, date, Year, month)
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, date, Year, month)
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, date, Year, Month)
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, date, Year, Month) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop")
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, Year, Month) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop")
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, Year, Month) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop") %>%
mutate(Period = case_when(
value <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, Year, Month) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop") %>%
mutate(Period = case_when(
avg_tmax <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
a <- temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = month(date)) %>%
group_by(location, Year, Month) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop") %>%
mutate(Period = case_when(
avg_tmax <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
view(a)
count(a$Period=="Warming Period")
count(a$Period="Warming Period")
=
count(a$Period=="Warming Period")
n(a$Period=="Warming Period")
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Month = week(date)) %>%
group_by(location, Year, Week) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop") %>%
mutate(Period = case_when(
avg_tmax <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Week = week(date)) %>%
group_by(location, Year, Week) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop") %>%
mutate(Period = case_when(
avg_tmax <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
unique(b$Week)
b <- temp_with_periods %>%
filter(datatype == 'TMAX') %>%
mutate(Week = week(date)) %>%
group_by(location, Year, Week) %>%
summarize(avg_tmax = mean(value, na.rm = TRUE), .groups = "drop") %>%
mutate(Period = case_when(
avg_tmax <= 7.22  ~ "Chilling Period",
TRUE ~ "Warming Period"))   # Default case
unique(b$Week)
b
